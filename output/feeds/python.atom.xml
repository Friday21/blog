<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>我的精神家园</title><link href="/" rel="alternate"></link><link href="/feeds/python.atom.xml" rel="self"></link><id>/</id><updated>2016-03-18T00:00:00+08:00</updated><entry><title>用Python控制Keithley测量仪器</title><link href="/blog/Keithley%E7%9A%84Python%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F.html" rel="alternate"></link><updated>2016-03-18T00:00:00+08:00</updated><author><name>Friday</name></author><id>tag:,2016-03-18:blog/Keithley的Python控制程序.html</id><summary type="html">&lt;h1 id="_1"&gt;背景&lt;/h1&gt;
&lt;p&gt;作为一名凝聚态物理学生，做科研的大部分时间都在和各种测量仪器打交道，我最常用的要数Keithley 2400, 2410等测量电信号的仪器了，Keithley仪器的分辨率还是很高的，2400测量电压和电流都能精确到纳(10^-9)的量级，6517更是能达到皮（10^-12）的量级, 非常了不起。实验室用来控制这几台仪器的程序都是Labview程序，属于G语言吧，研一刚进实验室的时候师姐给我讲了一个多小时才给我讲明白一个简单测量IV的程序流程，研一寒假前为了能够实现Labview调用的子程序中的一个参数能够在图表上实时显示，费了老大劲了，虽然最终实现了，但现在基本忘记怎么做的了，总之很复杂。看一下Labview的程序（其实就是画图啦）：
&lt;img alt="Alt text" src="/images/前面板.PNG" /&gt;
&lt;img alt="Alt text" src="/images/后面板.PNG" /&gt;&lt;/p&gt;
&lt;p&gt;前面板UI还好，但后面板程序图真是太不具有可读性啦，扩展性也很差，想添加个新功能得画半天图，于是我想如果能用Python控制这些测量仪器就好啦，这样就可以把每个测量功能封装成一个函数，需要扩展新功能的话直接调用再修改就好啦，抱着试试看的态度（买了一疗程）在github上搜索Keithley真的搜出来几条Python写的控制程序，好开心，于是下定决心把自己常用的几个Labview测量程序Python化！&lt;/p&gt;
&lt;h1 id="1"&gt;1. 环境搭建&lt;/h1&gt;
&lt;p&gt;首先是接口的连接，要通过Python连接上GPIB接口需要对应的库，这里用到的是pyvisa, 官方教程在&lt;a href="https://pyvisa.readthedocs.org/en/stable/"&gt;这里&lt;/a&gt;, 我用的Python IDE是pycharm，所以直接在pycharm上搜索安装pyvisa就好了（真的很方便），但根据pyvisa的说明还需要安装 National Instruments’s VISA ，去&lt;a href="http://search.ni.com/nisearch/app/main/p/ap/tech/lang/zhs/pg/1/sn/ssnav:ndr/fil/AND(nicontenttype:driver,%20sitesection:ndr,%20AND%20(OR(nigen10:1640,%20productcategories:1640,%20%22NI-VISA%22)%20,%20OR(nilanguage:zh-CN,%20nilanguage:en)"&gt;官网&lt;/a&gt;下载适合自己电脑的版本，由于目前Linux平台只支持32位的，而我的是Ubuntu 14.04LTS，没办法，只好装在win10上了，pyvisa和National Instruments’s VISA都安装成功后就可以进行下一步了  &lt;/p&gt;
&lt;h1 id="2"&gt;2. 连接仪器&lt;/h1&gt;
&lt;p&gt;如果用的台式机，又有GPIB扩展槽，直接脸上仪器就行了，我用的笔记本，所以还需要一跳USB-GPIB线，这里用的是  ，第一次用肯定要装驱动的，若不能自动安装则需要去官网下载驱动，一切就绪后，执行以下Python语句以检测是否成功连上仪器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;visa&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;visa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResourceManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_resources&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ASRL1::INSTR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ASRL2::INSTR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GPIB0::12::INSTR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GPIB0::12::INSTR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*IDN?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若果第三句执行后能找到你的仪器则大功告成，否则就要检查哪个驱动出了问题&lt;/p&gt;
&lt;h1 id="3-iv"&gt;3. 简单IV测量程序&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;首先连接仪器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 默认GPIB_address 地址为17（Keithley 2410）,2400为15
GPIB_address = 15
def connect_inst():
    rm = visa.ResourceManager()
    inst = rm.open_resource(&amp;#39;GPIB0::%d::INSTR&amp;#39; % GPIB_address)
    inst.write(&amp;#39;:outp on&amp;#39;)
    return inst
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中像&lt;code&gt;:output on&lt;/code&gt;之类的命令是根据Keithley 2400仪表的说明书来编写的，各个功能的实现都要参考说明书上的命令集
* 测量结束后关闭仪器，使参数恢复初始状态, 关闭输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def close_inst(inst):
    inst.write(&amp;quot;*RST&amp;quot;)
    inst.write(&amp;quot;*CLS&amp;quot;)
    inst.write(&amp;quot;SYSTEM:TIME:RESET:AUTO 0&amp;quot;)
    inst.write(&amp;#39;:outp off&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;测量过程&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def IV_sweep(start=-3, end=3, step=60, delay=100, interval=300):
    &amp;quot;&amp;quot;&amp;quot;
    :param start: 起始测量电压
    :param end: 结束测量电压
    :param step: 测量分多少步进行
    :param delay: 测量延迟（ms）
    :param interval: 测量间隔（ms）
    &amp;quot;&amp;quot;&amp;quot;
    inst = connect_inst()
    # 使电压量程自动随输入电压的值变化
    Range = 1.1*(math.fabs(end) if math.fabs(end) &amp;gt; math.fabs(start) else math.fabs(start))
    inst.write(&amp;#39;:SOUR:VOLT:RANG &amp;#39; + str(Range))
    inst.write(&amp;#39;:SOUR:DEL &amp;#39;+str(delay/1000))
    stage = (end - start)/step
    Ilist = list()
    Vlist = list()
    for i in range(step+1):
        V = start + stage*i
        # 设置测量电压
        inst.write(&amp;#39;:source:volt %s&amp;#39; % V)
        # 读取参数
        inst.write(&amp;#39;read?&amp;#39;)
        data = inst.read(&amp;quot;TRACE:DATA&amp;quot;)
        I = float(data.split(&amp;#39;,&amp;#39;)[1])
        # 将测量结果保存到Ilist 和Vlist中
        Ilist.append(I)
        Vlist.append(V)
        inst.write(&amp;#39;:source:volt 0&amp;#39;)
        time.sleep(interval/1000)
    close_inst(inst)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样测量结果就保存在两个list当中了，这当然不是我们要的最终结果，还需要把测量到的数据保存到文件中，而且测量过程中要实时绘图，保存数据到文件中比较基本，就不多说了，可以参考我上传到github上的&lt;a href="https://github.com/Friday21/Keithley_measure"&gt;代码&lt;/a&gt;，接下来说一说在Python下怎么实现动态绘图&lt;/p&gt;
&lt;h1 id="4-matplotlib"&gt;4. matplotlib实时绘图&lt;/h1&gt;
&lt;p&gt;Python有一个很好的绘图的第三方库——&lt;strong&gt;matplotlib&lt;/strong&gt;, 可以实现和matlab相媲美的绘图功能，相当好用。
* 用matplotlib简单的绘图&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;current&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;#为y轴加注释&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果如下：
&lt;img alt="Alt text" src="/images/figure_1.png" /&gt;  &lt;/p&gt;
&lt;p&gt;*实现实时绘图
若要实现实时绘图，就要开启plot的交互模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;开启实时绘图&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;step&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;......&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Vlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Vlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Ilist&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Ilist&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Vlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Ilist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;r&amp;#39;b-D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;这个为停顿0&lt;/span&gt;&lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="s s-Atom"&gt;s，能得到产生实时的效果&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nn"&gt;step&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;保存图片&lt;/span&gt;
            &lt;span class="nf"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;savefile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;+&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;关闭交互模式&lt;/span&gt;
            &lt;span class="s s-Atom"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ioff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="s s-Atom"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="s s-Atom"&gt;savefile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试结果如下图：&lt;br /&gt;
&lt;img alt="Alt text" src="/images/figure_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;再加上保存数据到文件的功能后就可以实现和Labview同样的功能啊，看了下代码，100行，虽然也不短，但逻辑很清楚，以后便于修改，下面一个例子将充分体现Python对Labview的优势。  &lt;/p&gt;
&lt;h1 id="5"&gt;5. 温度控制&lt;/h1&gt;
&lt;p&gt;其实不仅仅是Keithley，其它GPIB连接的仪器也可以同样用Python控制，比如温度控制仪model 331&lt;br /&gt;
下面是一个温度控制的小程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def term_ctrl(start, end, speed):
    &amp;quot;&amp;quot;&amp;quot;
    :param start: 起始温度  K
    :param end: 目标温度    K
    :param speed: 变温速度  K/min
    :return:
    &amp;quot;&amp;quot;&amp;quot;
    inst = connect_inst()
    inst.write(&amp;#39;ramp 1,0&amp;#39;)
    time.sleep(0.5)
    inst.write(&amp;#39;setp 1,&amp;#39; + str(start))
    time.sleep(0.5)
    inst.write(&amp;#39;ramp 1,1,&amp;#39; + str(speed))
    time.sleep(0.5)
    inst.write(&amp;#39;setp 1,&amp;#39; + str(end))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;短短几行就可以实现Labview的温控程序啦，方便不只是一点点！而且扩展起来很方便，比如：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;term_ctrl(290, 240, 1)
time.sleep(50*60)
term_ctrl(240, 220, 0.3)
time.sleep(70*60)
term_ctrl(220, 170, 0.5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样短短几行就可以实现在不同阶段以不同速率降温啦！&lt;/p&gt;
&lt;h1 id="6"&gt;6. 参考文章&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pyvisa.readthedocs.org/en/stable/"&gt;pyvisa 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/1.5.1/users/pyplot_tutorial.html"&gt;matplotlib官方文档&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.noneface.com/2015/10/25/EE-python-serial.html"&gt;matplotlib 实时绘图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hinnefe2/keithley"&gt;github上的Keithley程序&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文讲到的程序可以在&lt;a href="https://github.com/Friday21/Keithley_measure"&gt;这里&lt;/a&gt;找到源代码&lt;/p&gt;</summary><category term="python"></category><category term="Keithley"></category></entry></feed>