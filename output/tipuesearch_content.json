{"pages":[{"url":"/about-me.html","text":"我是李东勇，清华大学物理系在读硕士。我认为低智、偏执、思想贫乏是最大的邪恶，无知是罪，罪不可恕，此生致力于不断丰富自己的认知，做一个有趣的人。 须知参差多态，乃是幸福的本源。 ——罗素","tags":"pages","title":"About me"},{"url":"/blog/Keithley的Python控制程序.html","text":"背景 作为一名凝聚态物理学生，做科研的大部分时间都在和各种测量仪器打交道，我最常用的要数Keithley 2400, 2410等测量电信号的仪器了，Keithley仪器的分辨率还是很高的，2400测量电压和电流都能精确到纳(10&#94;-9)的量级，6517更是能达到皮（10&#94;-12）的量级, 非常了不起。实验室用来控制这几台仪器的程序都是Labview程序，属于G语言吧，研一刚进实验室的时候师姐给我讲了一个多小时才给我讲明白一个简单测量IV的程序流程，研一寒假前为了能够实现Labview调用的子程序中的一个参数能够在图表上实时显示，费了老大劲了，虽然最终实现了，但现在基本忘记怎么做的了，总之很复杂。看一下Labview的程序（其实就是画图啦）： 前面板UI还好，但后面板程序图真是太不具有可读性啦，扩展性也很差，想添加个新功能得画半天图，于是我想如果能用Python控制这些测量仪器就好啦，这样就可以把每个测量功能封装成一个函数，需要扩展新功能的话直接调用再修改就好啦，抱着试试看的态度（买了一疗程）在github上搜索Keithley真的搜出来几条Python写的控制程序，好开心，于是下定决心把自己常用的几个Labview测量程序Python化！ 1. 环境搭建 首先是接口的连接，要通过Python连接上GPIB接口需要对应的库，这里用到的是pyvisa, 官方教程在 这里 , 我用的Python IDE是pycharm，所以直接在pycharm上搜索安装pyvisa就好了（真的很方便），但根据pyvisa的说明还需要安装 National Instruments's VISA ，去 官网 下载适合自己电脑的版本，由于目前Linux平台只支持32位的，而我的是Ubuntu 14.04LTS，没办法，只好装在win10上了，pyvisa和National Instruments's VISA都安装成功后就可以进行下一步了 2. 连接仪器 如果用的台式机，又有GPIB扩展槽，直接脸上仪器就行了，我用的笔记本，所以还需要一跳USB-GPIB线，这里用的是 ，第一次用肯定要装驱动的，若不能自动安装则需要去官网下载驱动，一切就绪后，执行以下Python语句以检测是否成功连上仪器： >>>> import visa >>> rm = visa . ResourceManager () >>> rm . list_resources () ( 'ASRL1::INSTR' , 'ASRL2::INSTR' , 'GPIB0::12::INSTR' ) >>> inst = rm . open_resource ( 'GPIB0::12::INSTR' ) >>> print ( inst . query ( \"*IDN?\" )) 若果第三句执行后能找到你的仪器则大功告成，否则就要检查哪个驱动出了问题 3. 简单IV测量程序 首先连接仪器 # 默认GPIB_address 地址为17（Keithley 2410）,2400为15 GPIB_address = 15 def connect_inst(): rm = visa.ResourceManager() inst = rm.open_resource('GPIB0::%d::INSTR' % GPIB_address) inst.write(':outp on') return inst 其中像 :output on 之类的命令是根据Keithley 2400仪表的说明书来编写的，各个功能的实现都要参考说明书上的命令集 * 测量结束后关闭仪器，使参数恢复初始状态, 关闭输出 def close_inst(inst): inst.write(\"*RST\") inst.write(\"*CLS\") inst.write(\"SYSTEM:TIME:RESET:AUTO 0\") inst.write(':outp off') 测量过程 def IV_sweep(start=-3, end=3, step=60, delay=100, interval=300): \"\"\" :param start: 起始测量电压 :param end: 结束测量电压 :param step: 测量分多少步进行 :param delay: 测量延迟（ms） :param interval: 测量间隔（ms） \"\"\" inst = connect_inst() # 使电压量程自动随输入电压的值变化 Range = 1.1*(math.fabs(end) if math.fabs(end) > math.fabs(start) else math.fabs(start)) inst.write(':SOUR:VOLT:RANG ' + str(Range)) inst.write(':SOUR:DEL '+str(delay/1000)) stage = (end - start)/step Ilist = list() Vlist = list() for i in range(step+1): V = start + stage*i # 设置测量电压 inst.write(':source:volt %s' % V) # 读取参数 inst.write('read?') data = inst.read(\"TRACE:DATA\") I = float(data.split(',')[1]) # 将测量结果保存到Ilist 和Vlist中 Ilist.append(I) Vlist.append(V) inst.write(':source:volt 0') time.sleep(interval/1000) close_inst(inst) 这样测量结果就保存在两个list当中了，这当然不是我们要的最终结果，还需要把测量到的数据保存到文件中，而且测量过程中要实时绘图，保存数据到文件中比较基本，就不多说了，可以参考我上传到github上的 代码 ，接下来说一说在Python下怎么实现动态绘图 4. matplotlib实时绘图 Python有一个很好的绘图的第三方库—— matplotlib , 可以实现和matlab相媲美的绘图功能，相当好用。 * 用matplotlib简单的绘图 import matplotlib.pyplot as plt plt . plot ([ 1 , 2 , 3 , 4 ], [ 1 , 4 , 9 , 16 ], 'r-o' ) plt . axis ([ 0 , 6 , 0 , 20 ]) plt . ylabel ( 'current' ) #为y轴加注释 plt . show () 效果如下： *实现实时绘图 若要实现实时绘图，就要开启plot的交互模式： # 开启实时绘图 plt . ion () for i in range ( step + 1 ) : ...... plt . axis ([ min ( Vlist ) * 1.1 , max ( Vlist ) * 1.1 , min ( Ilist ), max ( Ilist )]) plt . plot ( Vlist , Ilist , r'b-D' ) # 这个为停顿0 .01 s，能得到产生实时的效果 plt . pause ( 0.1 ) if i == step : # 保存图片 savefig ( savefile . name [:- 4 ] +'.png' ) # 关闭交互模式 plt . ioff () plt . close () savefile . close () 测试结果如下图： 再加上保存数据到文件的功能后就可以实现和Labview同样的功能啊，看了下代码，100行，虽然也不短，但逻辑很清楚，以后便于修改，下面一个例子将充分体现Python对Labview的优势。 5. 温度控制 其实不仅仅是Keithley，其它GPIB连接的仪器也可以同样用Python控制，比如温度控制仪model 331 下面是一个温度控制的小程序： def term_ctrl(start, end, speed): \"\"\" :param start: 起始温度 K :param end: 目标温度 K :param speed: 变温速度 K/min :return: \"\"\" inst = connect_inst() inst.write('ramp 1,0') time.sleep(0.5) inst.write('setp 1,' + str(start)) time.sleep(0.5) inst.write('ramp 1,1,' + str(speed)) time.sleep(0.5) inst.write('setp 1,' + str(end)) 短短几行就可以实现Labview的温控程序啦，方便不只是一点点！而且扩展起来很方便，比如： term_ctrl(290, 240, 1) time.sleep(50*60) term_ctrl(240, 220, 0.3) time.sleep(70*60) term_ctrl(220, 170, 0.5) 这样短短几行就可以实现在不同阶段以不同速率降温啦！ 6. 参考文章 pyvisa 官方文档 matplotlib官方文档 matplotlib 实时绘图 github上的Keithley程序 本文讲到的程序可以在 这里 找到源代码","tags":"python","title":"用Python控制Keithley测量仪器"},{"url":"/blog/博客搭建.html","text":"搭建环境 Ubuntu 14.04 LTS Pelican 3.3.0 Apache 2.4.0 VPS： digital ocean SFO（非必须，可已选择github page） 域名解析：Godaddy 环境配置 安装pelican pip install pelican 创建blog目录 cd /var/www mkdir blog pelican-quickstart 之后终端会问几个问题，一路默认回车就行（有一个要填一下，不过这些都可以在后来生成的pelicanconf.py文件中修改的） 生成的目录结构如下： blog/ ├── content # 存放输入的markdown或RST源文件 │ └── (pages) # 存放手工创建的静态页面，可选 │ └── (posts) # 存放手工创建的文章，可选 ├── output # 存放最终生成的静态博客 ├── develop_server.sh # 测试服务器 ├── Makefile # 管理博客的Makefile ├── pelicanconf.py # 配置文件 └── publishconf.py # 发布文件，可删除 主题和插件 克隆主题到本地 git clone https://github.com/getpelican/pelican-themes.git 安装主题——bootstrap3 cd pelican-themes pelican-themes -i pelican-bootstrap3 这一步是将主题 pelican-bootstrap3 安装到Python库里，Ubuntu下路径为 /usr/local/lib/python2.7/dist-packages/pelican/themes/ ,所以后面修改字体和banner时需要在这个文件夹下的 pelican-bootstrap3/templates 文件修改 *克隆插件到本地 cd /var/www/blog git clone git://github.com/getpelican/pelican-plugins.git 此处将pelican的插件放在 /var/www/blog 的文件夹下 配置pelicanconf.py 博客的很多内容都是在 /var/www/blog/pelicancof.py 文件中配置的 AUTHOR = u'Friday' SITENAME = u'\\u6211\\u7684\\u7cbe\\u795e\\u5bb6\\u56ed' 博客名字 SITEURL = 'http://localhost:80' TIMEZONE = 'Asia/Shanghai' 时区改成上海 THEME = 'pelican-bootstrap3'主题设置为pelican-bootstrap3 添加社交账号 SOCIAL = (('facebook', 'https://www.facebook.com/li.dongyong?ref=bookmarks'), ('twitter','https://twitter.com/dongyongli'), ('github','https://github.com/Friday21'),) DEFAULT_PAGINATION = 5 每页显示5篇文章 PLUGIN_PATHS = [u'pelican-plugins',]插件地址，因为插件放在了和blog同级目录，所以可以 直接用pelican-plugins, 若放在其他地方改成相应路径即可 PLUGINS = ['sitemap', 'related_posts', 'random_article', 'liquid_tags.img', 'liquid_tags.video', 'liquid_tags.youtube', 'liquid_tags.vimeo', 'liquid_tags.include_code','tag_cloud','tipue_search']使用到的插件 RANDOM = 'random.html' RELATED_POSTS_MAX = 10 DIRECT_TEMPLATES = ('index', 'categories', 'authors', 'archives', 'tags','search') ARTICLE_URL = 'blog/{slug}.html' ARTICLE_SAVE_AS = 'blog/{slug}.html' PAGE_URL = '{slug}.html' PAGE_SAVE_AS = '{slug}.html' TAG_URL = 'tags/{slug}.html' TAG_SAVE_AS = 'tags/{slug}.html' TAGS_URL = 'tags.html' DISPLAY_CATEGORIES_ON_MENU = False DISPLAY_CATEGORIES_ON_SIDEBAR = False 不显示categories（感觉有tags就够了） DISPLAY_TAGS_ON_SIDEBAR = True 在边上显示标签栏 发布第一篇博客 用markdown写下第一篇文章，开头要包含以下内容： Title : My super title 必须 Date : 2010 - 12 - 03 10 : 20 必须 Modified : 2010 - 12 - 05 19 : 30 Category : Python Tags : pelican , publishing Slug : my - super - post 必须 Authors : Alexis Metaireau , Conan Doyle Summary : Short version for index and feeds 写好后把md文件放在blog下的content目录中，发布博客 cd /var/www/blog make publish 如果成功的话可以在blog目录下看到output文件夹，里面就是网站的所有内容，将其部署到github pages上即可以访问，在github创建username.github.io repo，其中username为你github的用户名，然后在Ubuntu上把博客内容推送到github pages上 cd /var/www/blog/output git init git add . git commit -m'first commit' git remote add origin git@github.com:username/username.github.io.git git push -u origin master 成功后访问username.github.io即能成功看到你的blog Apache 配置 如果不想用github page当然也可以用自己的VPS，让blog运行在Apache上 安装Apache sudo apt-get install apache2 配置虚拟主机 cd /etc/apache2/sites-available/ 新建blog的配置文件 vim blog.conf 添加如下内容 <Directory /var/www/blog/output > #博客目录 Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> <VirtualHost *:80 > # Admin email, Server Name (domain name) and any aliases ServerAdmin lidongyong22@gmail.com ServerName fridayhaohao.com 服务器名字 ServerAlias www.fridayhaohao.com #域名 # Index file and Document Root (where the public files are located) DirectoryIndex index.php index.html DocumentRoot /var/www/blog/output 文件目录 </VirtualHost> 使文件生效： $ sudo a2ensite duncanlock.test $ sudo service apache2 restart 成功后需要在godaday上将你的域名连接到服务器上的ip， 在DNS ZONE FILE下添加一天A记录，HOST：@，POINTS TO: 你的服务器IP，等待一段时间后就可以通过你的域名来访问你的blog啦！ 进一步完善博客 bootstrap主题 bootstrap下还细分有很多主题，免费的可以在 这里 看到，我选的是Cerulean, 舒服的蓝色主题，只需要在pelicanconf.py中添加 BOOTSTRAP_THEME = 'cerulean' , 然后在blog目录下make publish 就会生效了 banner 根据DandyDev的pelican-bootstrap3的 文档 的说明： A banner image can be added to the theme, displayed with the SITENAME and an optional subtitle. Config options are as follows: Set the banner image with BANNER = '/path/to/banner.png' Set the subtitle text with BANNER_SUBTITLE = 'This is my subtitle' By default, the banner is only shown on the index page. To display the banner on all pages, set BANNER_ALL_PAGES = True 在content目录下新建文件夹 images , 把要设置的首页头部图片放在此文件夹下，并在pelican.conf中添加 BANNER = '/images/banner.png' , banner.png 为图片的文件名，建议选好想要的图片后调整到适合的长宽比，用截图工具就行。我选了一张大海的图片，与上一步选的主题配合的很好。效果如下图： 字体 pelican默认英文字体，所以中文显示很难看！按照习惯还是调成微软雅黑舒服一点，办法如下： 尽如Python的pelican库文件夹，编辑style.css文件我的目录是 /usr/local/lib/python2.7/dist-packages/pelican/themes/pelican-bootstrap3/static/css/style.css 在头部添加以下两段： h1 , h2 , h3 , h4 , h5 , h6 , .h1 , .h2 , .h3 , .h4 , .h5 , .h6 { font-family : \"Microsoft YaHei UI\" , \"Microsoft YaHei\" , \"Arial\" , \"Verdana\" , \"Tahoma\" ; font-weight : 500 ; } body { font-family : \"Microsoft YaHei\" , \"Arial\" , \"Verdana\" , \"Tahoma\" ; color : #424242 ; } make publish 后就能看到中文显示舒服多了。 其实在这个文件中还可以进一步美化banner，比如把我的精神家园后面的黑框改为透明的，只需要把backgroud中的0.7改为0就行啦 #banner .copy { background : none repeat scroll 0 0 rgba ( 0 , 0 , 0 , 0 . 7 ); display : inline ; float : left ; max-width : 600px ; padding : 20px ; position : relative ; z-index : 1 ; } 改完后make publish就能看到效果了，体会下两张图的不同： 下图是设置为0.7的效果，上图是设置成0的透明效果。哈哈虽然前端基础为0，但这个过程中对前端增加了些了解。 添加多说评论 作为blog怎么能少的了评论呢，pelican自带的评论插件是Disqus comments， 但那是针对国外用户的，咱在局域网中上不了Facebook和Twitter，所以还是选择国内有名的评论插件——多说评论。 首先需要在 多说 的网站上注册，绑定网站信息，获取js代码，并根据提示修改成如下代码： <!-- 多说评论框 start --> <div class= \"ds-thread\" data-thread-key= \" {{ article.slug }} \" data-title= \" {{ article.title }} \" data-url= \" {{ SITEURL }} / {{ article.url }} \" ></div> <!-- 多说评论框 end --> <!-- 多说公共JS代码 start (一个网页只需插入一次) --> <script type= \"text/javascript\" > var duoshuoQuery = {short_name:\"lyon0804\"}; (function() { var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); })(); </script> <!-- 多说公共JS代码 end --> 尽如pelican的Python库，编辑评论模板， vim /usr/local/lib/python2.7/dist-packages/pelican/themes/pelican-bootstrap3/templates/includes/comments.html 对照着disqus评论添加如下内容： {% if DUOSHUO_SITENAME %} <hr/> <section class= \"comments\" id= \"comments\" > <h2> Comments </h2> <div class= \"ds-thread\" data-thread-key= \" {{ article.slug }} \" data-title= \" {{ article.title }} \" data-url= \" {{ SITEURL }} / {{ article.url }} \" ></div> <script type= \"text/javascript\" > var duoshuoQuery = {short_name:\" {{ DUOSHUO_SITENAME }} \"}; (function() { var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); })(); </script> <noscript> Please enable JavaScript to view the <a href= \"http://duoshuo.com/\" > comments powered by Duoshuo. </a></noscript> <a href= \"http://duoshuo.com\" class= \"dsq-brlink\" > comments powered by <span> Duoshuo </span></a> </section> {% endif %} 然后在pelicanconf.py中添加DUOSHUO_SITENAME字段，make publish 即可生效，我在多说网站上填的是fridayhaohao，所以我添加了 DUOSHUO_SITENAME = 'fridayhaohao' Google站内搜索 pelican自带的tipue_search用起来bug多多，果断换成高大上的Google站内搜索 ，根据网上的指导自己怎么做都不成功，最终折腾的结果是在pelicanconf中启用tipue_search（因为我懒得去调搜索框的大小），但是把search.html内容换成Google站内搜索的代码，搞定！(pelican-bootstrap3似乎没有bootstrap2的Google搜索内置代码，坑！) * 启用tipue_search 在PLUGINS中添加tipue_search 在DIRECT_TEMPLATES中添加search PLUGINS = ['sitemap', 'related_posts', 'random_article', 'liquid_tags.img', 'liquid_tags.video', 'liquid_tags.youtube', 'liquid_tags.vimeo', 'liquid_tags.include_code','tag_cloud','tipue_search'] DIRECT_TEMPLATES = ('index', 'categories', 'authors', 'archives', 'tags','search') 换成Google站内搜索 首先在 Google站内搜索 申请，得到自己的ID，然后把search.html替换为如下内容： <!DOCTYPE html> < html lang = \"zh_CN\" > < head > < meta charset = \"utf-8\" > < title > 站内搜索 </ title > </ head > < body > < style > #search-box { position : relative ; width : 50% ; margin : 0 ; padding : 1em ; } #search-form { height : 30px ; border : 1px solid #999 ; - webkit - border - radius : 5px ; - moz - border - radius : 5px ; border - radius : 5px ; background-color : #fff ; overflow : hidden ; } #search-text { font-size : 14px ; color : #ddd ; border-width : 0 ; background : transparent ; } #search-box input [ type = \"text\" ] { width : 90% ; padding : 4px 0 12px 1em ; color : #333 ; outline : none ; } </ style > < div id = 'search-box' > < form action = '/search.html' id = 'search-form' method = 'get' target = '_top' > < input id = 'search-text' name = 'q' placeholder = 'Search' type = 'text' /> </ form > </ div > < div id = \"cse\" style = \"width: 100%;\" > Loading </ div > < script src = \"http://www.google.com/jsapi\" type = \"text/javascript\" ></ script > < script type = \"text/javascript\" > google . load ( 'search' , '1' , { language : 'zh-CN' , style : google . loader . themes . V2_DEFAULT }); google . setOnLoadCallback ( function () { var customSearchOptions = {}; var customSearchControl = new google . search . CustomSearchControl ( '012191777864628038963:**********<!写入你申请的google站内搜索的ID号>）' , customSearchOptions ); customSearchControl . setResultSetSize ( google . search . Search . FILTERED_CSE_RESULTSET ); var options = new google . search . DrawOptions (); options . enableSearchResultsOnly (); customSearchControl . draw ( 'cse' , options ); function parseParamsFromUrl () { var params = {}; var parts = window . location . search . substr ( 1 ). split ( '\\x26' ); for ( var i = 0 ; i < parts . length ; i ++ ) { var keyValuePair = parts [ i ]. split ( '=' ); var key = decodeURIComponent ( keyValuePair [ 0 ]); params [ key ] = keyValuePair [ 1 ] ? decodeURIComponent ( keyValuePair [ 1 ]. replace ( /\\+/g , ' ' )) : keyValuePair [ 1 ]; } return params ; } var urlParams = parseParamsFromUrl (); var queryParamName = \"q\" ; if ( urlParams [ queryParamName ]) { customSearchControl . execute ( urlParams [ queryParamName ]); } }, true ); </ script > </ body > </ html > make publish 生效，但是 局域网 内上不了Google，所以搜索功能只能翻墙使用，但对我来说不算问题，blog搜索功能主要还是自己用 参考文章 谷歌站内搜索 添加多说评论 字体设置 pelicanconf.py配置 pelican搭建教程 pelican搭建教程2 apache2配置","tags":"建站","title":"Ubuntu下Pelican + Apache 搭建个人博客"},{"url":"/blog/紫操晨跑160303.html","text":"晨跑记录160303 起床 06:20 跑道 紫操4 500m/lap time 52'09 avg HR 146 BPM max HR 156 BPM in zone 40'49 CALORIES 582 KCAL FAT 21.7 g lap01 2'44 139 BPM lap02 2'54 145 BPM lap03 2'56 149 BPM lap04 2'52 148 BPM lap05 2'56 147 BPM lap06 2'52 150 BPM lap07 2'54 149 BPM lap08 2'55 150 BPM lap09 2'53 150 BPM lap10 3'01 149 BPM lap11 2'56 151 BPM lap12 2'56 150 BPM lap13 2'53 153 BPM lap14 2'55 150 BPM lap15 2'57 151 BPM lap16 3'05 148 BPM lap17 5'19 119 BPM 起床挣扎时一想到跑完就可以把记录发到博客上瞬间动力满满，早上阴天，没见到太阳。","tags":"锻炼","title":"紫操晨跑160303"},{"url":"/blog/紫操晨跑160301.html","text":"晨跑记录160301 起床 06:20 跑道 紫操4 500m/lap time 52'02 avg HR 143 BPM max HR 178 BPM in zone 41'40 CALORIES 568 KCAL FAT 21.9 g lap01 2'46 140 BPM lap02 2'50 143 BPM lap03 2'48 148 BPM lap04 2'52 148 BPM lap05 2'51 147 BPM lap06 2'19 148 BPM lap07 3'03 145 BPM lap08 3'01 144 BPM lap09 2'53 148 BPM lap10 3'03 147 BPM lap11 2'59 147 BPM lap12 3'00 145 BPM lap13 2'51 149 BPM lap14 2'57 149 BPM lap15 2'54 147 BPM lap16 3'13 146 BPM lap17 5'04 117 BPM 略感疲劳，心率比较低，下次跑争取维持在150BPM以上！","tags":"锻炼","title":"紫操晨跑160301"},{"url":"/blog/紫操晨跑160229.html","text":"晨跑记录160229 起床 06:20 跑道 紫操4 500m/lap time 52:00:00 avg HR 143 BPM max HR 159 BPM In zone 37:29:00 卡路里 564 KCAL FAT 21.9 g lap01 2'43 140 BPM lap02 2'54 146 BPM lap03 2'58 142 BPM lap04 2'54 146 BPM lap05 2'52 150 BPM lap06 2'55 147 BPM lap07 2'58 146 BPM lap08 2'54 147 BPM lap09 2'55 148 BPM lap10 3'05 146 BPM lap11 2'46 147 BPM lap12 2'59 145 BPM lap13 2'57 145 BPM lap14 2'52 149 BPM lap15 3'02 145 BPM lap16 3'03 143 BPM lap17 5'04 116 BPM 开学后的第一次晨跑， 看着东边的太阳徐徐升起，感觉自己在用跑步的方式汲取蓬勃的朝气","tags":"锻炼","title":"紫操晨跑160229"},{"url":"/blog/my first blog.html","text":"我的精神家园 哈哈 looks like its fine","tags":"misc","title":"第一篇博客"}]}