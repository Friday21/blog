{"pages":[{"url":"/about-me.html","text":"我是李东勇，清华大学物理系在读硕士。我认为低智、偏执、思想贫乏是最大的邪恶，无知是罪，罪不可恕，此生致力于不断丰富自己的认知，做一个有趣的人。 须知参差多态，乃是幸福的本源。 ——罗素","tags":"pages","title":"About me"},{"url":"/blog/库布齐沙漠穿越.html","text":"我的过去一片朦胧 轰轰隆隆中一阵冰凉将我从疲倦的睡梦中惊醒，费劲的睁开双眼，啊，我竟然睡在洗手池下面的一小块空地上，不知道怎么个不小心拧开了身边的水龙头，睡垫和手臂上全是凉水，一位大姐站在我旁边，她的眼神告诉我我妨碍她使用睡垫正上方的梳妆台了，我不好意思的站起身挪开了小窝，习惯性的看看左手腕，现在是凌晨三点十分，刚站起来就感到脚底一阵疼痛，感觉像是起了水泡，看着镜中的自己，嘴唇干裂，向前方望去，一片人海，原来我竟然在火车上！半睡半醒的我努力的回忆到底发生过什么。 看到紧挨洗手池的正前方有个空座位，我疑惑的坐了过去，对面是两个女生，左边是一胖一瘦两个男生，他们刚刚将硕大的背包放到行李架上，大汗淋漓，看得出来，他们是一起的，看了看过道那边坐着的几个人，都有同样款式的背包，他们都是一起的？ 不一会儿，他们在对面一个女生的带动下开始玩感建游戏——轮流自报家门，后面的人要把前面每一个人说过的信息重复一遍然后再加上自己的，我尴尬的坐在他们中间，我左边的瘦子说完后大家的目光都看向了我，难道我也需要说？懒得多想，我把前面几个人说过的重复了一遍又加上我自己的个人信息，但同时又隐隐的感到不妥，觉得有可能深陷一个诈骗团伙的圈套，所以篡改了部分事实。一阵惊呼，我向座位后面望去，一个粉面小生和他过道相隔的一个男生亲了起来，而他座位对面的一个男生则看着手中的四页纸说：\"这可是你自己挑的号哦，队长。\" 队长？ 原来他们是一个队伍，等等，我为什么和他们在一起，穿着差不多的衣服？ 看了看表，我若有所思的摸了摸上衣口袋，发现一张火车票，上面写着：北京北——乌拉特前旗。 \"这里是前旗最正宗的涮羊肉\"师傅热情的对我说：\"等你们吃完我再来接你们。\" 开车的师傅的热情让我不自禁的心情舒畅，还没反应过来怎么回事，粉面小生就抱着俩西瓜上来了，整车的人下来分西瓜，干裂的嘴唇碰上又软又凉的西瓜，哇哦！虽然西瓜一点都不甜，甚至怀疑是因为放了太多天而失去了那份脆劲儿，但听到周围人此起彼伏的赞叹声，我也熟练的装出沉醉的表情----我不想让他们注意到我其实并不是他们队伍中的一员，其实我自己甚至都记不起到底是不是他们中的一员，我只是因为过于畏惧孤独而机械的模仿着周围人的坐卧行止。跟着前面人的脚步进去了一家叫做\"老地方\"的涮羊肉店，整队人分为三桌，楼上两桌，楼下一桌，我挑了人最少的一桌坐了下来，后来饭桌上发生的事让我为隐瞒自己局外人身份的决定暗自称赞，这桌上的五个人简直丧心病狂，一大盘羊肉下锅，刚煮到可以吃的程度，三秒钟被捞的一干二净，他们还一个比一个能吃辣，问老板多要了三碗辣椒，如果被他们发现我是异类，非得被扔进锅涮了不行。 吃完饭师傅还没来接我们，打电话给他，他说大概两点到星河广场，让我们在那里等他，从饭店老板那里取了很多罐Gas后我们冒着小雨背起背包向星河广场那边走去，呀，包怎么这么重，打开一看里边有睡袋，饭盒，三双袜子，两大袋泡面，还有六瓶1.5L的纯净水！为什么要背这么多水！天啊，这帮人是要带我去哪里啊？在一个叫作夜鸣沙的地方师傅停了车，我知道我们要下车了，往车外望去，我的亲娘啊，全是沙子，一座沙丘连着另一座，连绵到天边，我觉得上了一个大当，我根本和他们不是一伙的，他们也从一开始就知道，他们好吃好喝的招待我就是骗我来这里，我想跑，但似乎是来不及了，这时候粉面小生走过来对我说：\"怕吗？\" 我强作镇定：\"一堆沙子有啥好怕的，我反而感到兴奋异常\" 他脸一黑：\"你，走前面！\" 无奈中，我背起身边的背包，拿起包上的一双写着MBC的拐杖向茫茫大漠走去，为了防止我逃跑，他们还派了三个精壮的男生走在我旁边，他们三个奇怪的有着同样的名字——路辅。我估计他们的姓应该是不同的，要不然也太巧了吧。走了没一会儿，听到汽车轰鸣声，难道是沙漠管理人员？ 难道我要得救了？喜出望外，但他们逼着我远离那些人，说什么害怕被驱逐，显然我的希望和他们的担心都是多余的，开车的是游客，他们才不会管我的死活，反而拿出手机拍摄我被压往处决地的画面，在前面带路的我是矛盾的，我既想加快速度甩掉他们，但又害怕非但没甩掉他们反而离他们计划处决我的地方更近了，我不紧不慢的向前走着，心里琢磨着他们将以怎样残忍的方式结束我这朦胧的一生，刚走两小时天就黑了，粉面小生让所有人停下，扎营生火，两个女生和一个胖胖的男生和我在一个帐篷里，虽然煮面的整个过程我都在场，甚至还参与了其中，但我还是相信他们有办法在我看不到的时候在面里放了致命的作料，所以第一锅我让他们三个先吃，他们奇怪的没有拒绝，还吃的滋滋有味，好吧，面是安全的，于是第二锅我吃了很多。饭后，粉面小生让大家去捡干树枝，天啊，他们要烧死我！我假装和他们一起去捡树枝并想伺机跑掉，但其中一个不知道姓什么的路辅一直跟着我，无奈，随意捡了两个树枝回到了营地，看着他们生火，当我还在想这一生最留恋什么的时候他们竟然围着火堆跳起舞来！旁边的人还催我和他们一起跳，我一看不用烧我了于是愉快地和他们胡乱的蹦跶起来。跳完闹完之后就各自回帐篷睡了，虽然知道明天就是我的末日但是当怒吼的狂风在黑夜里摧残着我睡的帐篷时，我还是感到一阵恐慌，叫醒帐篷里的那个胖胖的男生，一块出去用装满沙子的袋子将外账重新固定了下。重新躺下后，我开始无可救药地想念，想念帐篷外的每一颗星星，想念那些我死前牵挂的人和明天死后会想念我的人。然后开始痛彻心扉地后悔，后悔当我明明该勇敢的时候而我选择了犹豫；后悔当我明明万念俱灰的时候却强颜欢笑，表现得一切如常；后悔曾和自己讨厌的人假装熟稔；后悔曾对莫不关心的事物表现得\"很感兴趣\"；后悔明明自己罪无可恕却表现出一副好人的模样。漫漫长夜，无心睡眠。 早上五点半被闹钟叫醒，塞完睡袋走出帐篷，正好赶上太阳从东方探出头，日出好短暂啊，刹那间太阳就从地底升起来了，一刻都不多等那些还在睡梦中的人，同时也意味着留给我的时间也在一点点流逝，就像手中的沙子，越是想握紧，流逝的越快。我装了两大瓶时间放进包里继续向前走，明显的感觉到周围人的兴奋，应该是快到\"终点\"了吧，走到一处公路处，兴奋异常的他们脱掉衣服在柏油路上开始做俯卧撑，还让我给他们喊口号，做完后开始摆出各种造型来展示身上的肌肉，粉面小生甚至叫嚣着自己的肌肉三块钱一摸，呵，我也摸了几把，反正钱财对我来说也没啥用处了，发完神经继续往前赶，不久到达一个叫作\"爱情湖\"的地方，在他们醉心拍照的时候，贪心的我装了1.5L的爱情放进包里。继续前行，正前方有个叫沙漠公园售票站的地方， 他们当然不会让我去那里求救的，三个叫路辅的家伙压着我往公路左边的沙漠绕路，这时候两大瓶的时间和1.5L的爱情开始显示出它们的重量，我的双脚很快痛不可支，好像磨出了几个泡，忍受着疼痛总算绕回了公路，这时候两个穿制服的人还是看见了我们，开车向我们赶来，哈哈，我要得救了，但世事难料，他们收了粉面小生给的400块钱很快开车离去了，唉，也许没有那么多人摸，他是凑不够那400块的，唉，也许我少摸几次他也凑不够那400，现在说什么都晚了。制服走了之后，我们停下脚步，拿出包里所剩不多的食物和水开始享用午餐，我最后的午餐。 午餐的时候风沙很大，大饼掺着沙子嚼在嘴里别有一番滋味，那个嘎嘣脆啊，当我吃完想去周边散散步的时候，粉面小生的一句话让我如坠冰窖：\"ldy，带着大家去滚沙丘！\" 原来我叫ldy，但这已经不再重要了，所谓带头滚沙丘肯定是托词啦，我滚完他们肯定如释重负般埋掉我的尸体离开这茫茫大漠了。毕竟陪着我走了两天的沙漠，都挺辛苦的，我觉得不应该再让他们为难，挑了座我目力所及最高的沙丘，爬上去，身体侧躺，闭上眼，默默念到：\"囧哥，我随你而去！\" 用力向下滚去，伴随着周围人的欢呼声我越滚越快，我感到一阵阵眩晕，感觉不到方向，当稍微有些清醒时我试图用右手撑住沙子停下来，但被前进的动量轻易的打败，终于放弃挣扎，既然已经到了不可挽回的地步，那就随它去吧。 终于到了此行的终点，终于得到了应有的惩罚，心底欣喜异常。 一阵冷风吹过，我在剧烈的头痛中醒来，站起身向四周望去，底儿掉的蓝天下片片金黄，这里究竟是哪里？目力所及，无不是不知走去哪里的无数男男女女，我是在哪里也不是的沙漠的正中央，不断地呼唤着绿子。","tags":"Life","title":"2016.04.30—2016.05.03库布齐沙漠徒步个人总结"},{"url":"/blog/紫操晨跑160408.html","text":"起床 06:00 跑道 紫操4 500m/lap time 33:17:00 avg HR 149 BPM max HR 157 BPM in zone 23:40 CALORIES 385 KCAL FAT 13.3 g lap01 2'33 141 BPM lap02 2'43 149 BPM lap03 2'40 153 BPM lap04 2'41 149 BPM lap05 2'44 150 BPM lap06 2'49 149 BPM lap07 2'49 148 BPM lap08 2'49 150 BPM lap09 2'45 151 BPM lap10 2'49 151 BPM lap11 2'50 150 BPM lap12 2'50 150 BPM 穿上了新的跑鞋，爽！能在150的心率下达到每圈在2‘50以内的成绩，效果还是很明显的！","tags":"Life","title":"紫操晨跑160408"},{"url":"/blog/紫操晨跑160407.html","text":"起床 06:00 跑道 紫操4 500m/lap time 33:13:00 avg HR 155 BPM max HR 164 BPM in zone 3'00 CALORIES 406 KCAL FAT 12.8 g lap01 2'31 144 BPM lap02 2'42 154 BPM lap03 2'39 156 BPM lap04 2'41 157 BPM lap05 2'46 157 BPM lap06 2'47 155 BPM lap07 2'49 155 BPM lap08 2'46 157 BPM lap09 2'46 158 BPM lap10 2'53 156 BPM lap11 2'50 155 BPM lap12 2'55 154 BPM 坚持！","tags":"Life","title":"紫操晨跑160407"},{"url":"/blog/紫操晨跑160405.html","text":"起床 06:00 跑道 紫操4 500m/lap time 34:58:00 avg HR 148 BPM max HR 155 BPM in zone 19'24 CALORIES 400 KCAL FAT 14.2 g lap01 2‘35 143 BPM lap02 2'44 151 BPM lap03 2‘52 149 BPM lap04 3'01 145 BPM lap05 3‘00 144 BPM lap06 3'05 143 BPM lap07 2‘56 146 BPM lap08 2'56 149 BPM lap09 2‘53 151 BPM lap10 3'00 151 BPM lap11 2‘47 152 BPM lap12 3'01 150 BPM 开始恢复晨跑，这周要坚持到周五！","tags":"Life","title":"紫操晨跑160405"},{"url":"/blog/紫操晨跑160324.html","text":"起床 06:00 跑道 紫操4 500m/lap time 35:53:00 avg HR 143 BPM max HR 158 BPM in zone 7'49 CALORIES 390 KCAL FAT 14.9 g lap01 2'51 143 BPM lap02 3'00 140 BPM lap03 2'54 143 BPM lap04 3'05 140 BPM lap05 2'57 142 BPM lap06 2'53 145 BPM lap07 2'58 145 BPM lap08 3'08 140 BPM lap09 3'00 143 BPM lap10 3'03 143 BPM lap11 2'50 150 BPM lap12 3'05 144 BPM 心率没有控制好，主要是心率表时好时坏，好在今天又一次战胜了自己，没有放弃晨跑！","tags":"Life","title":"紫操晨跑160324"},{"url":"/blog/紫操晨跑160322.html","text":"起床 06:00 跑道 紫操4 500m/lap time 35:50:00 avg HR 146 BPM max HR 155 BPM in zone 23‘19 CALORIES 402 KCAL FAT 14.6 g lap01 2'45 137 BPM lap02 2‘51 147 BPM lap03 2'49 150 BPM lap04 2‘54 150 BPM lap05 3'01 147 BPM lap06 2‘59 146 BPM lap07 3'03 147 BPM lap08 3‘02 145 BPM lap09 3'04 146 BPM lap10 3'01 146 BPM lap11 3‘06 148 BPM lap12 3'02 146 BPM 昨晚本想取消今早的跑步的，好在坚持下来了，放弃的理由总有很多，坚持的信念却只有一个——我想要变得更好！","tags":"Life","title":"紫操晨跑160322"},{"url":"/blog/紫操晨跑160321.html","text":"起床 06:00 跑道 紫操4 500m/lap time 35:22:00 avg HR 145 BPM max HR 154 BPM in zone 27'10 CALORIES 391 KCAL FAT 14.5 g lap01 2'41 138 BPM lap02 2'49 145 BPM lap03 2'56 144 BPM lap04 3'05 140 BPM lap05 2'57 142 BPM lap06 2'56 146 BPM lap07 2'57 146 BPM lap08 2'52 149 BPM lap09 2'54 149 BPM lap10 3'01 147 BPM lap11 3'01 145 BPM lap12 3'05 144 BPM 好久没有晨跑了，今天明显感到吃力，比以前晨跑早起了20分钟是因为和 某人 约了早餐！","tags":"Life","title":"紫操晨跑160321"},{"url":"/blog/Keithley的Python控制程序.html","text":"背景 作为一名凝聚态物理学生，做科研的大部分时间都在和各种测量仪器打交道，我最常用的要数Keithley 2400, 2410等测量电信号的仪器了，Keithley仪器的分辨率还是很高的，2400测量电压和电流都能精确到纳(10&#94;-9)的量级，6517更是能达到皮（10&#94;-12）的量级, 非常了不起。实验室用来控制这几台仪器的程序都是Labview程序，属于G语言吧，研一刚进实验室的时候师姐给我讲了一个多小时才给我讲明白一个简单测量IV的程序流程，研一寒假前为了能够实现Labview调用的子程序中的一个参数能够在图表上实时显示，费了老大劲了，虽然最终实现了，但现在基本忘记怎么做的了，总之很复杂。看一下Labview的程序（其实就是画图啦）： 前面板UI还好，但后面板程序图真是太不具有可读性啦，扩展性也很差，想添加个新功能得画半天图，于是我想如果能用Python控制这些测量仪器就好啦，这样就可以把每个测量功能封装成一个函数，需要扩展新功能的话直接调用再修改就好啦，抱着试试看的态度（买了一疗程）在github上搜索Keithley真的搜出来几条Python写的控制程序，好开心，于是下定决心把自己常用的几个Labview测量程序Python化！ 1. 环境搭建 首先是接口的连接，要通过Python连接上GPIB接口需要对应的库，这里用到的是pyvisa, 官方教程在 这里 , 我用的Python IDE是pycharm，所以直接在pycharm上搜索安装pyvisa就好了（真的很方便），但根据pyvisa的说明还需要安装 National Instruments's VISA ，去 官网 下载适合自己电脑的版本，由于目前Linux平台只支持32位的，而我的是Ubuntu 14.04LTS，没办法，只好装在win10上了，pyvisa和National Instruments's VISA都安装成功后就可以进行下一步了 2. 连接仪器 如果用的台式机，又有GPIB扩展槽，直接连上仪器就行了，我用的笔记本，所以还需要一条USB-GPIB线，这里用的是KUSB-488A ，第一次用肯定要装驱动的，若不能自动安装则需要去官网下载驱动，一切就绪后，执行以下Python语句以检测是否成功连上仪器： >>>> import visa >>> rm = visa . ResourceManager () >>> rm . list_resources () ( 'ASRL1::INSTR' , 'ASRL2::INSTR' , 'GPIB0::12::INSTR' ) >>> inst = rm . open_resource ( 'GPIB0::12::INSTR' ) >>> print ( inst . query ( \"*IDN?\" )) 若果第三句执行后能找到你的仪器则大功告成，否则就要检查哪个驱动出了问题 3. 简单IV测量程序 首先连接仪器 # 默认GPIB_address 地址为17（Keithley 2410）,2400为15 GPIB_address = 15 def connect_inst (): rm = visa . ResourceManager () inst = rm . open_resource ( 'GPIB0:: %d ::INSTR' % GPIB_address ) inst . write ( ':outp on' ) return inst 其中像 :output on 之类的命令是根据Keithley 2400仪表的说明书来编写的，各个功能的实现都要参考说明书上的命令集 * 测量结束后关闭仪器，使参数恢复初始状态, 关闭输出 def close_inst ( inst ): inst . write ( \"*RST\" ) inst . write ( \"*CLS\" ) inst . write ( \"SYSTEM:TIME:RESET:AUTO 0\" ) inst . write ( ':outp off' ) 测量过程 def IV_sweep ( start =- 3 , end = 3 , step = 60 , delay = 100 , interval = 300 ): \"\"\" :param start: 起始测量电压 :param end: 结束测量电压 :param step: 测量分多少步进行 :param delay: 测量延迟（ms） :param interval: 测量间隔（ms） \"\"\" inst = connect_inst () # 使电压量程自动随输入电压的值变化 Range = 1.1 * ( math . fabs ( end ) if math . fabs ( end ) > math . fabs ( start ) else math . fabs ( start )) inst . write ( ':SOUR:VOLT:RANG ' + str ( Range )) inst . write ( ':SOUR:DEL ' + str ( delay / 1000 )) stage = ( end - start ) / step Ilist = list () Vlist = list () for i in range ( step + 1 ): V = start + stage * i # 设置测量电压 inst . write ( ':source:volt %s ' % V ) # 读取参数 inst . write ( 'read?' ) data = inst . read ( \"TRACE:DATA\" ) I = float ( data . split ( ',' )[ 1 ]) # 将测量结果保存到Ilist 和Vlist中 Ilist . append ( I ) Vlist . append ( V ) inst . write ( ':source:volt 0' ) time . sleep ( interval / 1000 ) close_inst ( inst ) 这样测量结果就保存在两个list当中了，这当然不是我们要的最终结果，还需要把测量到的数据保存到文件中，而且测量过程中要实时绘图，保存数据到文件中比较基本，就不多说了，可以参考我上传到github上的 代码 ，接下来说一说在Python下怎么实现动态绘图 4. matplotlib实时绘图 Python有一个很好的绘图的第三方库—— matplotlib , 可以实现和matlab相媲美的绘图功能，相当好用。 * 用matplotlib简单的绘图 import matplotlib.pyplot as plt plt . plot ([ 1 , 2 , 3 , 4 ], [ 1 , 4 , 9 , 16 ], 'r-o' ) plt . axis ([ 0 , 6 , 0 , 20 ]) plt . ylabel ( 'current' ) #为y轴加注释 plt . show () 效果如下： 实现实时绘图 若要实现实时绘图，就要开启plot的交互模式： # 开启实时绘图 plt . ion () for i in range ( step + 1 ): ...... plt . axis ([ min ( Vlist ) * 1.1 , max ( Vlist ) * 1.1 , min ( Ilist ), max ( Ilist )]) plt . plot ( Vlist , Ilist , r'b-D' ) # 这个为停顿0.01s，能得到产生实时的效果 plt . pause ( 0.1 ) if i == step : # 保存图片 savefig ( savefile . name [: - 4 ] + '.png' ) # 关闭交互模式 plt . ioff () plt . close () savefile . close () 测试结果如下图： 再加上保存数据到文件的功能后就可以实现和Labview同样的功能啊，看了下代码，100行，虽然也不短，但逻辑很清楚，以后便于修改，下面一个例子将充分体现Python对Labview的优势。 5. 温度控制 其实不仅仅是Keithley，其它GPIB连接的仪器也可以同样用Python控制，比如温度控制仪model 331 下面是一个温度控制的小程序： def term_ctrl ( start , end , speed ): \"\"\" :param start: 起始温度 K :param end: 目标温度 K :param speed: 变温速度 K/min :return: \"\"\" inst = connect_inst () inst . write ( 'ramp 1,0' ) time . sleep ( 0.5 ) inst . write ( 'setp 1,' + str ( start )) time . sleep ( 0.5 ) inst . write ( 'ramp 1,1,' + str ( speed )) time . sleep ( 0.5 ) inst . write ( 'setp 1,' + str ( end )) 短短几行就可以实现Labview的温控程序啦，方便不只是一点点！而且扩展起来很方便，比如： term_ctrl ( 290 , 240 , 1 ) time . sleep ( 50 * 60 ) term_ctrl ( 240 , 220 , 0.3 ) time . sleep ( 70 * 60 ) term_ctrl ( 220 , 170 , 0.5 ) 这样短短几行就可以实现在不同阶段以不同速率降温啦！ 6. 参考文章 pyvisa 官方文档 matplotlib官方文档 matplotlib 实时绘图 github上的Keithley程序 本文讲到的程序可以在 这里 找到源代码","tags":"Technology","title":"用Python控制Keithley测量仪器"},{"url":"/blog/博客搭建.html","text":"搭建环境 Ubuntu 14.04 LTS Pelican 3.3.0 Apache 2.4.0 VPS： digital ocean SFO（非必须，可已选择github page） 域名解析：Godaddy 环境配置 安装pelican pip install pelican 创建blog目录 cd /var/www mkdir blog pelican-quickstart 之后终端会问几个问题，一路默认回车就行（有一个要填一下，不过这些都可以在后来生成的pelicanconf.py文件中修改的） 生成的目录结构如下： blog / ├── content # 存放输入的markdown或RST源文件 │ └── ( pages ) # 存放手工创建的静态页面，可选 │ └── ( posts ) # 存放手工创建的文章，可选 ├── output # 存放最终生成的静态博客 ├── develop_server . sh # 测试服务器 ├── Makefile # 管理博客的Makefile ├── pelicanconf . py # 配置文件 └── publishconf . py # 发布文件，可删除 主题和插件 克隆主题到本地 git clone https://github.com/getpelican/pelican-themes.git 安装主题——bootstrap3 cd pelican-themes pelican-themes -i pelican-bootstrap3 这一步是将主题 pelican-bootstrap3 安装到Python库里，Ubuntu下路径为 /usr/local/lib/python2.7/dist-packages/pelican/themes/ ,所以后面修改字体和banner时需要在这个文件夹下的 pelican-bootstrap3/templates 文件修改 *克隆插件到本地 cd /var/www/blog git clone git://github.com/getpelican/pelican-plugins.git 此处将pelican的插件放在 /var/www/blog 的文件夹下 配置pelicanconf.py 博客的很多内容都是在 /var/www/blog/pelicancof.py 文件中配置的 AUTHOR = u'Friday' SITENAME = u' \\u6211\\u7684\\u7cbe\\u795e\\u5bb6\\u56ed ' #博客名字 SITEURL = 'http://localhost:80' TIMEZONE = 'Asia/Shanghai' #时区改成上海 THEME = 'pelican-bootstrap3' #主题设置为pelican-bootstrap3 #添加社交账号 SOCIAL = (( 'facebook' , 'https://www.facebook.com/li.dongyong?ref=bookmarks' ), ( 'twitter' , 'https://twitter.com/dongyongli' ), ( 'github' , 'https://github.com/Friday21' ),) DEFAULT_PAGINATION = 5 #每页显示5篇文章 PLUGIN_PATHS = [ u'pelican-plugins' ,] #插件地址，因为插件放在了和blog同级目录，所以可以 直接用pelican-plugins, #若放在其他地方改成相应路径即可 PLUGINS = [ 'sitemap' , 'related_posts' , 'random_article' , 'liquid_tags.img' , 'liquid_tags.video' , 'liquid_tags.youtube' , 'liquid_tags.vimeo' , 'liquid_tags.include_code' , 'tag_cloud' , 'tipue_search' ] #使用到的插件 RANDOM = 'random.html' RELATED_POSTS_MAX = 10 DIRECT_TEMPLATES = ( 'index' , 'categories' , 'authors' , 'archives' , 'tags' , 'search' ) ARTICLE_URL = 'blog/{slug}.html' ARTICLE_SAVE_AS = 'blog/{slug}.html' PAGE_URL = '{slug}.html' PAGE_SAVE_AS = '{slug}.html' TAG_URL = 'tags/{slug}.html' TAG_SAVE_AS = 'tags/{slug}.html' TAGS_URL = 'tags.html' DISPLAY_CATEGORIES_ON_MENU = False DISPLAY_CATEGORIES_ON_SIDEBAR = False #不显示categories（感觉有tags就够了） DISPLAY_TAGS_ON_SIDEBAR = True #在边上显示标签栏 发布第一篇博客 用markdown写下第一篇文章，开头要包含以下内容： Title : My super title 必须 Date : 2010 - 12 - 03 10 : 20 必须 Modified : 2010 - 12 - 05 19 : 30 Category : Python Tags : pelican , publishing Slug : my - super - post 必须 Authors : Alexis Metaireau , Conan Doyle Summary : Short version for index and feeds 写好后把md文件放在blog下的content目录中，发布博客 cd /var/www/blog make publish 如果成功的话可以在blog目录下看到output文件夹，里面就是网站的所有内容，将其部署到github pages上即可以访问，在github创建username.github.io repo，其中username为你github的用户名，然后在Ubuntu上把博客内容推送到github pages上 cd /var/www/blog/output git init git add . git commit -m'first commit' git remote add origin git@github.com:username/username.github.io.git git push -u origin master 成功后访问username.github.io即能成功看到你的blog Apache 配置 如果不想用github page当然也可以用自己的VPS，让blog运行在Apache上 安装Apache sudo apt-get install apache2 配置虚拟主机 cd /etc/apache2/sites-available/ 新建blog的配置文件 vim blog.conf 添加如下内容 < Directory / var / www / blog / output > #博客目录 Options Indexes FollowSymLinks AllowOverride None Require all granted </ Directory > < VirtualHost * : 80 > # Admin email, Server Name (domain name) and any aliases ServerAdmin lidongyong22 @gmail.com ServerName fridayhaohao . com #服务器名字 ServerAlias www . fridayhaohao . com #域名 # Index file and Document Root (where the public files are located) DirectoryIndex index . php index . html DocumentRoot / var / www / blog / output #文件目录 </ VirtualHost > 使文件生效： $ sudo a2ensite duncanlock.test $ sudo service apache2 restart 成功后需要在godaday上将你的域名连接到服务器上的ip， 在DNS ZONE FILE下添加一天A记录，HOST：@，POINTS TO: 你的服务器IP，等待一段时间后就可以通过你的域名来访问你的blog啦！ 进一步完善博客 bootstrap主题 bootstrap下还细分有很多主题，免费的可以在 这里 看到，我选的是Cerulean, 舒服的蓝色主题，只需要在pelicanconf.py中添加 BOOTSTRAP_THEME = 'cerulean' , 然后在blog目录下make publish 就会生效了 banner 根据DandyDev的pelican-bootstrap3的 文档 的说明： A banner image can be added to the theme, displayed with the SITENAME and an optional subtitle. Config options are as follows: Set the banner image with BANNER = '/path/to/banner.png' Set the subtitle text with BANNER_SUBTITLE = 'This is my subtitle' By default, the banner is only shown on the index page. To display the banner on all pages, set BANNER_ALL_PAGES = True 在content目录下新建文件夹 images , 把要设置的首页头部图片放在此文件夹下，并在pelican.conf中添加 BANNER = '/images/banner.png' , banner.png 为图片的文件名，建议选好想要的图片后调整到适合的长宽比，用截图工具就行。我选了一张大海的图片，与上一步选的主题配合的很好。效果如下图： 字体 pelican默认英文字体，所以中文显示很难看！按照习惯还是调成微软雅黑舒服一点，办法如下： 尽如Python的pelican库文件夹，编辑style.css文件我的目录是 /usr/local/lib/python2.7/dist-packages/pelican/themes/pelican-bootstrap3/static/css/style.css 在头部添加以下两段： h1 , h2 , h3 , h4 , h5 , h6 , .h1 , .h2 , .h3 , .h4 , .h5 , .h6 { font-family : \"Microsoft YaHei UI\" , \"Microsoft YaHei\" , \"Arial\" , \"Verdana\" , \"Tahoma\" ; font-weight : 500 ; } body { font-family : \"Microsoft YaHei\" , \"Arial\" , \"Verdana\" , \"Tahoma\" ; color : #424242 ; } make publish 后就能看到中文显示舒服多了。 其实在这个文件中还可以进一步美化banner，比如把我的精神家园后面的黑框改为透明的，只需要把backgroud中的0.7改为0就行啦 #banner .copy { background : none repeat scroll 0 0 rgba ( 0 , 0 , 0 , 0 . 7 ); display : inline ; float : left ; max-width : 600px ; padding : 20px ; position : relative ; z-index : 1 ; } 改完后make publish就能看到效果了，体会下两张图的不同： 下图是设置为0.7的效果，上图是设置成0的透明效果。哈哈虽然前端基础为0，但这个过程中对前端增加了些了解。 添加多说评论 作为blog怎么能少的了评论呢，pelican自带的评论插件是Disqus comments， 但那是针对国外用户的，咱在局域网中上不了Facebook和Twitter，所以还是选择国内有名的评论插件——多说评论。 首先需要在 多说 的网站上注册，绑定网站信息，获取js代码，并根据提示修改成如下代码： <!-- 多说评论框 start --> < div class = \"ds-thread\" data-thread-key = \"{{ article.slug }}\" data-title = \"{{ article.title }}\" data-url = \"{{ SITEURL }}/{{ article.url }}\" ></ div > <!-- 多说评论框 end --> <!-- 多说公共JS代码 start (一个网页只需插入一次) --> < script type = \"text/javascript\" > var duoshuoQuery = { short_name : \"lyon0804\" }; ( function () { var ds = document . createElement ( 'script' ); ds . type = 'text/javascript' ; ds . async = true ; ds . src = ( document . location . protocol == 'https:' ? 'https:' : 'http:' ) + '//static.duoshuo.com/embed.js' ; ds . charset = 'UTF-8' ; ( document . getElementsByTagName ( 'head' )[ 0 ] || document . getElementsByTagName ( 'body' )[ 0 ]). appendChild ( ds ); })(); </ script > <!-- 多说公共JS代码 end --> 尽如pelican的Python库，编辑评论模板， vim /usr/local/lib/python2.7/dist-packages/pelican/themes/pelican-bootstrap3/templates/includes/comments.html 对照着disqus评论添加如下内容： {% if DUOSHUO_SITENAME %} < hr /> < section class = \"comments\" id = \"comments\" > < h2 > Comments </ h2 > < div class = \"ds-thread\" data-thread-key = \"{{ article.slug }}\" data-title = \"{{ article.title }}\" data-url = \"{{ SITEURL }}/{{ article.url }}\" ></ div > < script type = \"text/javascript\" > var duoshuoQuery = { short_name : \"{{ DUOSHUO_SITENAME }}\" }; ( function () { var ds = document . createElement ( 'script' ); ds . type = 'text/javascript' ; ds . async = true ; ds . src = ( document . location . protocol == 'https:' ? 'https:' : 'http:' ) + '//static.duoshuo.com/embed.js' ; ds . charset = 'UTF-8' ; ( document . getElementsByTagName ( 'head' )[ 0 ] || document . getElementsByTagName ( 'body' )[ 0 ]). appendChild ( ds ); })(); </ script > < noscript > Please enable JavaScript to view the < a href = \"http://duoshuo.com/\" > comments powered by Duoshuo. </ a ></ noscript > < a href = \"http://duoshuo.com\" class = \"dsq-brlink\" > comments powered by < span > Duoshuo </ span ></ a > </ section > {% endif %} 然后在pelicanconf.py中添加DUOSHUO_SITENAME字段，make publish 即可生效，我在多说网站上填的是fridayhaohao，所以我添加了 DUOSHUO_SITENAME = 'fridayhaohao' Google站内搜索 pelican自带的tipue_search用起来bug多多，果断换成高大上的Google站内搜索 ，根据网上的指导自己怎么做都不成功，最终折腾的结果是在pelicanconf中启用tipue_search（因为我懒得去调搜索框的大小），但是把search.html内容换成Google站内搜索的代码，搞定！(pelican-bootstrap3似乎没有bootstrap2的Google搜索内置代码，坑！) * 启用tipue_search 在PLUGINS中添加tipue_search 在DIRECT_TEMPLATES中添加search PLUGINS = [ 'sitemap' , 'related_posts' , 'random_article' , 'liquid_tags.img' , 'liquid_tags.video' , 'liquid_tags.youtube' , 'liquid_tags.vimeo' , 'liquid_tags.include_code' , 'tag_cloud' , 'tipue_search' ] DIRECT_TEMPLATES = ( 'index' , 'categories' , 'authors' , 'archives' , 'tags' , 'search' ) 换成Google站内搜索 首先在 Google站内搜索 申请，得到自己的ID，然后把search.html替换为如下内容： <!DOCTYPE html> < html lang = \"zh_CN\" > < head > < meta charset = \"utf-8\" > < title > 站内搜索 </ title > </ head > < body > < style > #search-box { position : relative ; width : 50% ; margin : 0 ; padding : 1em ; } #search-form { height : 30px ; border : 1px solid #999 ; - webkit - border - radius : 5px ; - moz - border - radius : 5px ; border - radius : 5px ; background-color : #fff ; overflow : hidden ; } #search-text { font-size : 14px ; color : #ddd ; border-width : 0 ; background : transparent ; } #search-box input [ type = \"text\" ] { width : 90% ; padding : 4px 0 12px 1em ; color : #333 ; outline : none ; } </ style > < div id = 'search-box' > < form action = '/search.html' id = 'search-form' method = 'get' target = '_top' > < input id = 'search-text' name = 'q' placeholder = 'Search' type = 'text' /> </ form > </ div > < div id = \"cse\" style = \"width: 100%;\" > Loading </ div > < script src = \"http://www.google.com/jsapi\" type = \"text/javascript\" ></ script > < script type = \"text/javascript\" > google . load ( 'search' , '1' , { language : 'zh-CN' , style : google . loader . themes . V2_DEFAULT }); google . setOnLoadCallback ( function () { var customSearchOptions = {}; var customSearchControl = new google . search . CustomSearchControl ( '012191777864628038963:**********<!写入你申请的google站内搜索的ID号>）' , customSearchOptions ); customSearchControl . setResultSetSize ( google . search . Search . FILTERED_CSE_RESULTSET ); var options = new google . search . DrawOptions (); options . enableSearchResultsOnly (); customSearchControl . draw ( 'cse' , options ); function parseParamsFromUrl () { var params = {}; var parts = window . location . search . substr ( 1 ). split ( '\\x26' ); for ( var i = 0 ; i < parts . length ; i ++ ) { var keyValuePair = parts [ i ]. split ( '=' ); var key = decodeURIComponent ( keyValuePair [ 0 ]); params [ key ] = keyValuePair [ 1 ] ? decodeURIComponent ( keyValuePair [ 1 ]. replace ( /\\+/g , ' ' )) : keyValuePair [ 1 ]; } return params ; } var urlParams = parseParamsFromUrl (); var queryParamName = \"q\" ; if ( urlParams [ queryParamName ]) { customSearchControl . execute ( urlParams [ queryParamName ]); } }, true ); </ script > </ body > </ html > make publish 生效，但是 局域网 内上不了Google，所以搜索功能只能翻墙使用，但对我来说不算问题，blog搜索功能主要还是自己用 参考文章 谷歌站内搜索 添加多说评论 字体设置 pelicanconf.py配置 pelican搭建教程 pelican搭建教程2 apache2配置","tags":"Technology","title":"Ubuntu下Pelican + Apache 搭建个人博客"},{"url":"/blog/紫操晨跑160303.html","text":"晨跑记录160303 起床 06:20 跑道 紫操4 500m/lap time 52'09 avg HR 146 BPM max HR 156 BPM in zone 40'49 CALORIES 582 KCAL FAT 21.7 g lap01 2'44 139 BPM lap02 2'54 145 BPM lap03 2'56 149 BPM lap04 2'52 148 BPM lap05 2'56 147 BPM lap06 2'52 150 BPM lap07 2'54 149 BPM lap08 2'55 150 BPM lap09 2'53 150 BPM lap10 3'01 149 BPM lap11 2'56 151 BPM lap12 2'56 150 BPM lap13 2'53 153 BPM lap14 2'55 150 BPM lap15 2'57 151 BPM lap16 3'05 148 BPM lap17 5'19 119 BPM 起床挣扎时一想到跑完就可以把记录发到博客上瞬间动力满满，早上阴天，没见到太阳。","tags":"Life","title":"紫操晨跑160303"},{"url":"/blog/紫操晨跑160301.html","text":"晨跑记录160301 起床 06:20 跑道 紫操4 500m/lap time 52'02 avg HR 143 BPM max HR 178 BPM in zone 41'40 CALORIES 568 KCAL FAT 21.9 g lap01 2'46 140 BPM lap02 2'50 143 BPM lap03 2'48 148 BPM lap04 2'52 148 BPM lap05 2'51 147 BPM lap06 2'19 148 BPM lap07 3'03 145 BPM lap08 3'01 144 BPM lap09 2'53 148 BPM lap10 3'03 147 BPM lap11 2'59 147 BPM lap12 3'00 145 BPM lap13 2'51 149 BPM lap14 2'57 149 BPM lap15 2'54 147 BPM lap16 3'13 146 BPM lap17 5'04 117 BPM 略感疲劳，心率比较低，下次跑争取维持在150BPM以上！","tags":"Life","title":"紫操晨跑160301"},{"url":"/blog/紫操晨跑160229.html","text":"晨跑记录160229 起床 06:20 跑道 紫操4 500m/lap time 52:00:00 avg HR 143 BPM max HR 159 BPM In zone 37:29:00 卡路里 564 KCAL FAT 21.9 g lap01 2'43 140 BPM lap02 2'54 146 BPM lap03 2'58 142 BPM lap04 2'54 146 BPM lap05 2'52 150 BPM lap06 2'55 147 BPM lap07 2'58 146 BPM lap08 2'54 147 BPM lap09 2'55 148 BPM lap10 3'05 146 BPM lap11 2'46 147 BPM lap12 2'59 145 BPM lap13 2'57 145 BPM lap14 2'52 149 BPM lap15 3'02 145 BPM lap16 3'03 143 BPM lap17 5'04 116 BPM 开学后的第一次晨跑， 看着东边的太阳徐徐升起，感觉自己在用跑步的方式汲取蓬勃的朝气","tags":"Life","title":"紫操晨跑160229"},{"url":"/blog/my first blog.html","text":"我的精神家园 哈哈 looks like its fine","tags":"Life","title":"第一篇博客"}]}